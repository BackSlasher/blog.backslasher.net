<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://blog.backslasher.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.backslasher.net/" rel="alternate" type="text/html" /><updated>2023-09-15T16:13:09+03:00</updated><id>https://blog.backslasher.net/feed.xml</id><title type="html">BackSlasher</title><subtitle>My blog</subtitle><author><name>Nitzan</name></author><entry><title type="html">`javax.mail:mail` 1.4.7 is broken, and how to workaround</title><link href="https://blog.backslasher.net/javax-mail-1.4.7.html" rel="alternate" type="text/html" title="`javax.mail:mail` 1.4.7 is broken, and how to workaround" /><published>2023-09-15T00:00:00+03:00</published><updated>2023-09-15T00:00:00+03:00</updated><id>https://blog.backslasher.net/javax-mail-1.4.7</id><content type="html" xml:base="https://blog.backslasher.net/javax-mail-1.4.7.html">&lt;h1 id=&quot;javaxmail-and-i&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javax.mail&lt;/code&gt; and I&lt;/h1&gt;
&lt;p&gt;One of the current tasks on my agenda involves the modernization of a project that is currently built on Java 8.
Given that this project is actively in use and under continuous development, a complete freeze of the codebase for a one-time migration isn’t a feasible option.
The reason being, such an approach would necessitate extensive library upgrades and rewrites to the code using them.
Instead, I’ve devised a more pragmatic plan:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start with building and running on Java 8.&lt;/li&gt;
  &lt;li&gt;Modify code and imports to still build and run on Java 8, but also be able to build and run on Java 11.&lt;/li&gt;
  &lt;li&gt;Switch the run and build environment to Java 11.&lt;/li&gt;
  &lt;li&gt;Modify code and imports to build and run on both Java 11 and Java 17.&lt;/li&gt;
  &lt;li&gt;Switch the run and build environment to Java 17.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ve decided to insert an intermediate step involving Java 11. This choice stems from the substantial gap between Java 8 and 17, making it unlikely for me to locate compatible versions of imports (e.g., Spring) that cater to both Java versions.&lt;/p&gt;

&lt;p&gt;When attempting to build our code using Java 11, I promptly identified the absence of certain classes. These omissions were attributed to components of Java categorized as “Enterprise,” which were present in Java 8, deprecated in Java 9, and entirely eliminated in Java 11.&lt;/p&gt;

&lt;p&gt;To ensure the availability of these classes, I made the following addition to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;javax.mail&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mail&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.4.7&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where version 1.4.7 represented the latest stable release &lt;a href=&quot;https://mvnrepository.com/artifact/javax.mail/mail&quot;&gt;mvnrepository&lt;/a&gt;) of that library.
This adjustment allowed my code to compile successfully, as it encompassed all the classes and methods essential for its operation.&lt;/p&gt;

&lt;h1 id=&quot;the-runtime-problem&quot;&gt;The runtime problem&lt;/h1&gt;
&lt;p&gt;The code compiled successfully; however, I encountered a peculiar error while testing our email sending functionality:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java.lang.NoSuchMethodError: com.sun.mail.util.LineOutputStream.&amp;lt;init&amp;gt;(Ljava/io/OutputStream;Z)V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I searched through our codebase and found no references to ‘LineOutputStream,’ so it doesn’t appear to be a misuse of any external library on my part. It was time to delve into the stack trace:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
Caused by: java.lang.NoSuchMethodError: com.sun.mail.util.LineOutputStream.&amp;lt;init&amp;gt;(Ljava/io/OutputStream;Z)V
	at javax.mail.internet.MimeBodyPart.writeTo(MimeBodyPart.java:1631)
	at javax.mail.internet.MimeMessage.writeTo(MimeMessage.java:1889)
	at javax.mail.internet.MimeMessage.writeTo(MimeMessage.java:1863)
    at net.backslasher.EmailSender.send(EmailSender.java:69)
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So somehow the library code is calling a nonexistent constructor. Weird!
Digging through the decompiled code with IDEA, I found the following call:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MimeBodyPart.class&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writeTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MimePart&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignoreList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessagingException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;LineOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;los&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LineOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;los&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LineOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;los&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LineOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowutf8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;While the actual constructor looks like this:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// LineOutputStream.class&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LineOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By reading the &lt;a href=&quot;https://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/types.html#wp276&quot;&gt;Java type signature list&lt;/a&gt;, we can see that this is what the exception is complaining about - it’s looking for a constructor with 2 arguments - OutputStream and a boolean (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;init&amp;gt;(Ljava/io/OutputStream;Z)V&lt;/code&gt;), but finds no such thing.&lt;/p&gt;

&lt;p&gt;I had some questions.&lt;/p&gt;

&lt;h2 id=&quot;how-did-this-happen&quot;&gt;How did this happen?&lt;/h2&gt;
&lt;p&gt;From inspecting the code of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javax.mail:mail:1.4.7&lt;/code&gt; thoroughly, I can only conclude that the package itself has an internal contradiction.
It provides a class with a specific constructor, but calls a different one.
I was baffled as to how this library was able to be produced.
This served as a reminder that it is possible to manually package Class files from different compilation runs in the same JAR, and their incompatibility only becomes apparent when attempting to use them together – which is precisely what I encountered.&lt;/p&gt;

&lt;h2 id=&quot;how-did-i-manage-to-compile&quot;&gt;How did I manage to compile?&lt;/h2&gt;
&lt;p&gt;Since I downloaded precompiled code (as in a collection of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Class&lt;/code&gt; files and not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java&lt;/code&gt; files), my compiler didn’t run on that code and missed the incompatibility.
If we draw a parallel to C code compilation, we would typically have a final “linkage” step that scans all cross-file references and fails if any of them are incompatible. However, in this context, such a linkage step does not apply.&lt;/p&gt;

&lt;h2 id=&quot;what-should-i-do-now&quot;&gt;what should I do now?&lt;/h2&gt;
&lt;p&gt;One might say the “right” thing would be upgrading to the library that replaces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javax.mail:mail&lt;/code&gt; (which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javax.mail:javax.mail-api&lt;/code&gt;, which was itself replaced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jakarta.mail:jakarta.mail-api&lt;/code&gt;), as it brings us the most up-to-date (and hopefully problem free) code.
However, after 15 minutes of trying this I saw that there’s too much of our code we’d need to change as a resutlt.
Instead, I went for the minimal effective change, and tried different version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.mail:mail&lt;/code&gt; until I found one that didn’t have this internal contradiction - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.4.4&lt;/code&gt;.
I changed our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt; to look like:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;javax.mail&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mail&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.4.4&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And things went back to normal&lt;/p&gt;

&lt;h1 id=&quot;next-steps&quot;&gt;Next steps&lt;/h1&gt;
&lt;p&gt;Once we stabilize on Java 11, I’m planning to replace this package with the “correct” one (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jakarta.mail:jakarta.mail-api&lt;/code&gt;) Until we get there, this quick fix will do.&lt;/p&gt;</content><author><name>Nitzan</name></author><category term="Java" /><summary type="html">javax.mail and I One of the current tasks on my agenda involves the modernization of a project that is currently built on Java 8. Given that this project is actively in use and under continuous development, a complete freeze of the codebase for a one-time migration isn’t a feasible option. The reason being, such an approach would necessitate extensive library upgrades and rewrites to the code using them. Instead, I’ve devised a more pragmatic plan:</summary></entry><entry><title type="html">WSL for non-programming security analysts</title><link href="https://blog.backslasher.net/wsl-security-analysts.html" rel="alternate" type="text/html" title="WSL for non-programming security analysts" /><published>2023-09-08T00:00:00+03:00</published><updated>2023-09-08T00:00:00+03:00</updated><id>https://blog.backslasher.net/wsl-security-analysts</id><content type="html" xml:base="https://blog.backslasher.net/wsl-security-analysts.html">&lt;p&gt;I have a friend who isn’t a developer and believes that coding is beyond their grasp. They work as a security analyst and prefer using Windows as their operating system. I discovered that introducing them to the Windows Subsystem for Linux significantly enhanced their daily tasks. It allowed them to replace inefficient online tools or labor-intensive manual processes with simple command-line solutions.&lt;br /&gt;
I’d like to share these tricks with a wider audience.&lt;/p&gt;

&lt;h3 id=&quot;what-youll-need&quot;&gt;What you’ll need&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows/wsl/install&quot;&gt;Install WSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/training/modules/wsl-introduction/&quot;&gt;WSL introduction&lt;/a&gt;, especially “Run basic WSL commands”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows/wsl/filesystems&quot;&gt;Accessing Windows files on WSL, and vice versa&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;how-this-works&quot;&gt;How this works&lt;/h3&gt;
&lt;p&gt;Each use case serves as a demonstration of a specific tool. Given the ubiquity of these tools, you can easily find online resources to further maximize their utility.&lt;br /&gt;
Lines initiated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; denote user input, while lines without it represent the computer’s responses.&lt;/p&gt;

&lt;p&gt;Furthermore, these tools can be combined to perform more intricate tasks. For instance, you can use them to filter a list of domains and only display those registered by BestCompany. If you’re interested in learning how to harness these capabilities, you can explore bash tutorials like &lt;a href=&quot;https://linuxconfig.org/bash-scripting-tutorial-for-beginners&quot;&gt;this one&lt;/a&gt;, among many others.&lt;/p&gt;

&lt;h2 id=&quot;who-owns-this-domain-whois&quot;&gt;Who owns this domain (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whois&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;Instead of using random sites, get the data yourself firsthand&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ whois google.com
   Domain Name: GOOGLE.COM
   Registry Domain ID: 2138514_DOMAIN_COM-VRSN
   Registrar WHOIS Server: whois.markmonitor.com
   Registrar URL: http://www.markmonitor.com
   Updated Date: 2019-09-09T15:39:04Z
   Creation Date: 1997-09-15T04:00:00Z
   Registry Expiry Date: 2028-09-14T04:00:00Z
   Registrar: MarkMonitor Inc.
   Registrar IANA ID: 292
   Registrar Abuse Contact Email: abusecomplaints@markmonitor.com
   Registrar Abuse Contact Phone: +1.2086851750
   Domain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited
   Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited
   Domain Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited
   Domain Status: serverDeleteProhibited https://icann.org/epp#serverDeleteProhibited
   Domain Status: serverTransferProhibited https://icann.org/epp#serverTransferProhibited
   Domain Status: serverUpdateProhibited https://icann.org/epp#serverUpdateProhibited
   Name Server: NS1.GOOGLE.COM
   Name Server: NS2.GOOGLE.COM
   Name Server: NS3.GOOGLE.COM
   Name Server: NS4.GOOGLE.COM
   DNSSEC: unsigned
   URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/
&amp;gt;&amp;gt;&amp;gt; Last update of whois database: 2023-09-08T15:27:09Z &amp;lt;&amp;lt;&amp;lt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;search-a-directory-for-specific-text-grep&quot;&gt;Search a directory for specific text (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;Need to search for the word “password” in a directory containing a trillion files?&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ grep -r password
page2.txt:password
page2.txt:passwords
page2.txt:password's
page1.txt:This is my password: 1232
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Just looking to list the files containing the word “password”?&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ grep -r -l password
page2.txt
page1.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Case insensitive match (“Password” or “pAssWoRd”)?&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ grep -r -i password
page3.txt:the SeCreT PassWord is potato
page2.txt:password
page2.txt:passwords
page2.txt:password's
page1.txt:This is my password: 1232
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;what-kind-of-file-is-this-file&quot;&gt;What kind of file is this (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;Looking to determine the file type of a file that lacks an extension?&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ file riddle 
riddle: Zip archive data, at least v1.0 to extract, compression method=store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Interested in determining the file types for all files in your directory, even those without extensions?&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ file *
dunno:    SQLite 3.x database, last written using SQLite version 3041002, file counter 973, database pages 2280, 1st free page 744, free pages 638, cookie 0x272, schema 4, UTF-8, version-valid-for 973
enigma:   SVG Scalable Vector Graphics image
mystery:  JSON text data
riddle:   Zip archive data, at least v1.0 to extract, compression method=store
unclear:  OpenDocument Spreadsheet
unknown:  Microsoft Word 2007+
whoknows: Composite Document File V2 Document, Little Endian, Os: Windows, Version 1.0, Code page: -535, Revision Number: 1, Total Editing Time: 00:13, Create Time/Date: Fri Sep  8 16:32:55 2023, Last Saved Time/Date: Fri Sep  8 16:33:08 2023
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dns-information-host-dig&quot;&gt;DNS information (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dig&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;Need a brief summary of where a specific domain is currently pointing?&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ host gmail.com
gmail.com has address 172.217.18.5
gmail.com has IPv6 address 2a00:1450:4001:812::2005
gmail.com mail is handled by 30 alt3.gmail-smtp-in.l.google.com.
gmail.com mail is handled by 10 alt1.gmail-smtp-in.l.google.com.
gmail.com mail is handled by 5 gmail-smtp-in.l.google.com.
gmail.com mail is handled by 40 alt4.gmail-smtp-in.l.google.com.
gmail.com mail is handled by 20 alt2.gmail-smtp-in.l.google.com.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And translate an IP to a name, if available&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ host 172.217.18.5
5.18.217.172.in-addr.arpa domain name pointer fra24s22-in-f5.1e100.net.
5.18.217.172.in-addr.arpa domain name pointer fra15s28-in-f5.1e100.net.
5.18.217.172.in-addr.arpa domain name pointer fra02s19-in-f5.1e100.net.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For detailed answers to specific questions, you can utilize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dig&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dig gmail.com

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.18.18 &amp;lt;&amp;lt;&amp;gt;&amp;gt; gmail.com
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 17879
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 65494
;; QUESTION SECTION:
;gmail.com.			IN	A

;; ANSWER SECTION:
gmail.com.		234	IN	A	172.217.18.5

;; Query time: 3 msec
;; SERVER: 127.0.0.53#53(127.0.0.53) (UDP)
;; WHEN: Fri Sep 08 18:40:44 IDT 2023
;; MSG SIZE  rcvd: 54
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;there-is-more&quot;&gt;There is more&lt;/h2&gt;
&lt;p&gt;This list is not exhaustive. Linux, which relies heavily on command-line interfaces, offers a multitude of powerful tools that are readily installable with ample documentation available. You can tap into the knowledge of Linux-savvy friends or conduct online searches to discover numerous options that can significantly simplify your life.&lt;/p&gt;</content><author><name>Nitzan</name></author><category term="Linux" /><category term="Windows" /><category term="WSL" /><category term="Bash" /><summary type="html">I have a friend who isn’t a developer and believes that coding is beyond their grasp. They work as a security analyst and prefer using Windows as their operating system. I discovered that introducing them to the Windows Subsystem for Linux significantly enhanced their daily tasks. It allowed them to replace inefficient online tools or labor-intensive manual processes with simple command-line solutions. I’d like to share these tricks with a wider audience.</summary></entry><entry><title type="html">Bash “Keep or Delete” script for PDFs</title><link href="https://blog.backslasher.net/pdf-keep-or-delete.html" rel="alternate" type="text/html" title="Bash “Keep or Delete” script for PDFs" /><published>2023-05-22T00:00:00+03:00</published><updated>2023-05-22T00:00:00+03:00</updated><id>https://blog.backslasher.net/pdf-keep-or-delete</id><content type="html" xml:base="https://blog.backslasher.net/pdf-keep-or-delete.html">&lt;p&gt;I recently discovered that I had over 100 PDFs in my “Downloads” directory and needed to determine which ones I wanted to keep.
Instead of spending 10 minutes manually sorting them, I invested 20 minutes in writing a script to assist me.&lt;/p&gt;

&lt;p&gt;The script iterates through all the provided arguments and performs the following steps for each file:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;It opens the file in preview mode using Evince (this can be easily customized).&lt;/li&gt;
  &lt;li&gt;A prompt appears asking whether to keep the file.&lt;/li&gt;
  &lt;li&gt;The viewer is then closed.&lt;br /&gt;
This step posed a challenge since GDK apps tend to fork, making it insufficient to grab the child PID using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$!&lt;/code&gt;.
To overcome this, I utilized &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsof&lt;/code&gt; to identify all processes that had the file open and terminated them.&lt;/li&gt;
  &lt;li&gt;If the response is “N,” the file is sent to the trash.&lt;br /&gt;
I opted for using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gio trash&lt;/code&gt; since that’s the trash utility I have installed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This script transformed a tedious chore into an enjoyable task.&lt;/p&gt;

&lt;h2 id=&quot;the-script&quot;&gt;The Script&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-euo&lt;/span&gt; pipefail

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;yes_or_no &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; [y/n]: &quot;&lt;/span&gt; yn
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$yn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Yy]&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;0  &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Nn]&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Aborted&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return  &lt;/span&gt;1 &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;open &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  evince &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 2&amp;gt;/dev/null
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;killviewer &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  lsof &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 2&amp;gt;/dev/null | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'NR==2 {print $2}'&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;trash &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    gio trash &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;INPUT &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;open &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;amp;
  &lt;span class=&quot;nv&quot;&gt;KEEP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;yes_or_no &lt;span class=&quot;s2&quot;&gt;&quot;Keep &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  killviewer &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KEEP&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;keeping&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deleting&quot;&lt;/span&gt;
    trash &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi
done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Nitzan</name></author><category term="Linux" /><category term="PDF" /><category term="Bash" /><summary type="html">I recently discovered that I had over 100 PDFs in my “Downloads” directory and needed to determine which ones I wanted to keep. Instead of spending 10 minutes manually sorting them, I invested 20 minutes in writing a script to assist me.</summary></entry><entry><title type="html">Is this really an emergency?</title><link href="https://blog.backslasher.net/is-this-an-emergency.html" rel="alternate" type="text/html" title="Is this really an emergency?" /><published>2023-04-24T00:00:00+03:00</published><updated>2023-04-24T00:00:00+03:00</updated><id>https://blog.backslasher.net/is-this-an-emergency</id><content type="html" xml:base="https://blog.backslasher.net/is-this-an-emergency.html">&lt;p&gt;One of the teams I worked with would do an “engineering pain-point” survey twice a year.
During one of those surveys, the main complaint was that on-calls had a hard time getting help from other teams or even engineers from their own team. I shadowed an on-call rotation for a couple of weeks and noticed this pattern:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The on-call receives a notification of a problem, either through an alert, a graph indicating an issue, or a report from a colleague.&lt;/li&gt;
  &lt;li&gt;The on-call needs to perform a remedial action. Usually:
    &lt;ol&gt;
      &lt;li&gt;Reverting a code change by someone else&lt;/li&gt;
      &lt;li&gt;Disabling a feature flag owned by a different team&lt;/li&gt;
      &lt;li&gt;Approaching someone from another team to get their opinion or ask them to revert something. Sometimes, this meant waking up that person.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In each of these cases, because the on-call was interrupting someone else, a discussion often followed (civil or otherwise) about whether the problem was ‘a real’ emergency.
I have personally experienced a situation where I had to wake up the network on-call engineer at the company because all of the servers in a region were running an healthy, but were inaccessible to users.
The response I received (understandable given that it was 3 AM on a weekend) was:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“&lt;strong&gt;Is this really an emergency?&lt;/strong&gt; You have other regions.”
I insisted, and eventually the network on-call found a load balancer that was accepting connections but blackholing the traffic.
I could imagine that a less experienced version of myself stuggling to stand my ground, delaying the resolution of the problem by at least a day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point, we had no consensus, either inside or outside the team, on what consistutes an emergency.
Edge cases were obvious - the whole service being down is bad, and an image being off by one pixel can wait for working hours.
Intermediaries, such as “we can’t release to prod because our end-to-end testing is broken” or “We have increased latency because a CDN wasn’t retaining our assets”, were not obvious, and on every incident necessitated a lengthy “how bad is it” discussion.&lt;/p&gt;

&lt;p&gt;This is exhausting, especially when this happens at 3 am and you’re not very proficient at handling crises.&lt;/p&gt;

&lt;p&gt;I started working on this guideline for “what is an emergency?” and getting everyone onboard.&lt;/p&gt;

&lt;h2 id=&quot;solution-process&quot;&gt;Solution process&lt;/h2&gt;
&lt;p&gt;To establish a consensus on “what kind of problems can we have, and how bad are they?” I used a mostly-growing concentric circle approach:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I started with myself, drawing on my past memories and reviewing historical documentation of emergencies we had faced.&lt;/li&gt;
  &lt;li&gt;My SRE comrades formed the second tier. We likely had at least one of us involved in any emergency and had more context and passion about the prioritization problem.&lt;/li&gt;
  &lt;li&gt;All of our team’s engineers came third. Involving them had multiple advantages:
    &lt;ol&gt;
      &lt;li&gt;It reflected the work being done and demonstrated that we care about the problem.&lt;/li&gt;
      &lt;li&gt;It provided insight into emergencies that we might be missing, as we were sometimes blind to emergencies that we were not currently monitoring for.&lt;/li&gt;
      &lt;li&gt;It identified interested parties who might be willing to work on this consensus or promote it within the team.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Non-tech stakeholders were then consulted. They were able to ratify what we consider to be emergencies, and what are the threshold (e.g. what amount user disconnects should be considered an emergency).&lt;/li&gt;
  &lt;li&gt;The external teams that we depended on (networking, hardware) were next. Having them in the loop meant that once we agreed on what constituted an emergency, pushback on our requests for help could be ended by referring to the document.&lt;/li&gt;
  &lt;li&gt;The external teams that depended on us (e.g. video, which owned their user experience end-to-end) formed the final tier. This worked like the networking team but in reverse. We were less likely to be asked to stop our release pipeline or be woken up at night for something that we did not agree was an emergency.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I maintained a comprehensive record of the entire process in a Google document and ensured its accessibility to anyone interested in it. Additionally, I regularly revisited the document to ensure that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We accurately defined thresholds, such as “How many users can we lose before we need to wake up?”&lt;/li&gt;
  &lt;li&gt;We kept the definitions simple and easy to understand, avoiding complex graphs, decision trees, or jargon. This made it possible for external teams or non-engineers to comprehend our criteria and confirm its validity.&lt;/li&gt;
  &lt;li&gt;We established a real-time metric that notified us within a minute of detecting an issue, and if necessary, created one.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After the document was approved by everybody, I worked on mirroring it in our monitoring infrastructure, making sure that we are woken up iff (if and only if) there is a matching emergency criteria in the document.&lt;/p&gt;

&lt;h2 id=&quot;how-the-solution-looked&quot;&gt;How the solution looked&lt;/h2&gt;

&lt;p&gt;The actual numbers and metrics aren’t that interesting as much as the overall structure, so this is what I’ll share&lt;/p&gt;

&lt;h3 id=&quot;types-of-emergency&quot;&gt;Types of emergency&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;“Things are on fire”: This type of emergency requires immediate attention, and it’s acceptable to wake people up or reach out to them on weekends.&lt;/li&gt;
  &lt;li&gt;“Problem”: This type of emergency is a high priority but should only be addressed during work hours. There’s no need to wake people up, but other work should be deprioritized to resolve the problem.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;metrics&quot;&gt;Metrics&lt;/h3&gt;

&lt;p&gt;We ensured that every metric was clearly defined and accompanied by a brief explanation of why it was important to measure. Our metric selection process involved three types of metrics:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;User experience proxies:&lt;/strong&gt; Metrics such as average response time, session crash rate, and number of engagements per second were easily measurable and indicative of a bad user experience. We reached a quick consensus on these metrics as they aligned with our team’s top priority of ensuring a positive user experience.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pure infra:&lt;/strong&gt; Metrics such as CPU/memory utilization, ingress/egress rate, and process restarts were hotly debated as to whether they should trigger an alert. However, our experience showed that these metrics were often the leading indicators of an impending user experience issue. Thus, we agreed to wake up on extreme values of these metrics, even if user engagement was not immediately affected.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Delayed user experience metrics:&lt;/strong&gt; Metrics such as time spent, monthly active users, and bug reports were important to non-technical stakeholders but were not easily measurable in real time. Although it was possible to approximate these metrics with some automation, we ultimately decided to manually check them and keep them as slow metrics. We left the door open to revisiting this decision later.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;conditions&quot;&gt;Conditions&lt;/h3&gt;
&lt;p&gt;These conditions are straightforward and easy to understand, even during the middle of the night. They look like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the average response time goes over 1.5 seconds for 20 minutes, it’s an emergency class 2 (problem).&lt;/li&gt;
  &lt;li&gt;If the average response time goes over 3 seconds for 10 minutes, it’s an emergency class 1 (things are on fire).&lt;/li&gt;
  &lt;li&gt;If the memory utilization goes over 90% for 10 minutes, it’s an emergency class 2.&lt;/li&gt;
  &lt;li&gt;If the time spent today drops 20% compared to the same day last week, it’s an emergency class 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;The project’s didn’t end by publishing the document. We continuously refined the document and the corresponding monitoring infrastructure by adjusting thresholds and metrics.&lt;br /&gt;
Additionally, I monitored the on-call team’s efforts to request assistance and was pleased to observe a significant reduction in issues. The document’s acceptance by the teams provided a shared point of reference that helped to minimize any potential friction.&lt;/p&gt;</content><author><name>Nitzan</name></author><category term="Ramblings" /><category term="ops" /><summary type="html">One of the teams I worked with would do an “engineering pain-point” survey twice a year. During one of those surveys, the main complaint was that on-calls had a hard time getting help from other teams or even engineers from their own team. I shadowed an on-call rotation for a couple of weeks and noticed this pattern:</summary></entry><entry><title type="html">a 1.5GB string</title><link href="https://blog.backslasher.net/1.5GB-string.html" rel="alternate" type="text/html" title="a 1.5GB string" /><published>2023-04-06T00:00:00+03:00</published><updated>2023-04-06T00:00:00+03:00</updated><id>https://blog.backslasher.net/1.5GB-string</id><content type="html" xml:base="https://blog.backslasher.net/1.5GB-string.html">&lt;p&gt;In my previous role, I supported a Java service that operated similarly to RDP or Citrix by enabling remote UI functionality. This service relied on sessions, which consisted of interconnected Java objects that were supposed to be cleaned up either when a user logged out or after a predetermined timeout period.&lt;/p&gt;

&lt;p&gt;During the course of our capacity planning, we discovered a significant memory waste that I wanted to share with you.&lt;/p&gt;

&lt;h2 id=&quot;capacity-planning&quot;&gt;Capacity Planning&lt;/h2&gt;
&lt;p&gt;Part of my routine work with the team included capacity planning for the next year.
By analyzing our usage metrics, growth patterns, and population research, our data scientists were able to predict &lt;em&gt;how many users we could expect to have in the coming year&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To determine the necessary infrastructure required to support this anticipated user base, we employed a sophisticated formula:&lt;/p&gt;

\[\text{Number of Servers} = { \text{Number of Users} \over \text{Users per Server} } * \text{Safety Buffer}\]

&lt;p&gt;To know how many &lt;em&gt;servers&lt;/em&gt; we need to have for next year.&lt;/p&gt;

&lt;p&gt;One of our capacity planning sessions revealed that, due to the immense popularity of our service, we were anticipating a significant growth in the number of users in the coming year. Our calculations indicated that we would require more servers than we had available to accommodate this increased demand. Consequently, we were faced with the challenge of figuring out how to fit more users onto each individual server in order to support the projected user base.&lt;/p&gt;

&lt;h2 id=&quot;what-are-we-bound-on&quot;&gt;What are we bound on?&lt;/h2&gt;
&lt;p&gt;With capacity measurement, we can pinpoint the bottleneck in our system, and in this case, it is the memory. As more users are added to the server, the system begins to falter under the increased load, ultimately running out of memory. Understanding we are &lt;em&gt;memory-bound&lt;/em&gt; is crucial, as it directs our efforts towards reducing memory consumption in order to accommodate more users on the server.&lt;/p&gt;

&lt;h2 id=&quot;investigating-memory-usage&quot;&gt;Investigating memory usage&lt;/h2&gt;
&lt;p&gt;We had a crude estimation of our per-user memory consumption using this:&lt;/p&gt;

\[\text{Per User Memory} = { \text{Server Memory} \over \text{User Capacity} }\]

&lt;p&gt;Using imaginary numbers, we can say something like:&lt;/p&gt;

\[\text{Per User Memory} = \text{300MB} = { \text{90 GB} \over \text{300} }\]

&lt;p&gt;So we can approxiamte per-user memory requirement as 300MB.
In order to understand how to reduce this number, we went into more serious memory measurement.&lt;/p&gt;

&lt;p&gt;We began analyzing the Java memory dump of our servers to identify potential areas for improvement. Initially, we reviewed the dumps manually, but due to the sheer number of servers, we developed a custom script to automate the process. Using this script, we were able to identify memory-wasting objects that were attributed to specific sessions. By pinpointing these issues, we can effectively eliminate the waste and optimize our system’s memory usage.&lt;/p&gt;

&lt;p&gt;I might cover the script and analysis in another post, but for now I want to focus on a specific quick win the memory analysis gave us.&lt;/p&gt;

&lt;h2 id=&quot;a-very-big-string&quot;&gt;A very big string&lt;/h2&gt;
&lt;p&gt;We started with going over our thousands of memdumps and looking for very big objects. Our biggest whale was a 1.5GB string. It looked something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/1.5GB-string/quote.png&quot; alt=&quot;\\\\\\\\\\\\\\\\\\\&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In case the picture didn’t convey the message, the string contained many many backslashes. We found similar smaller ones, but this one was the biggest.&lt;/p&gt;

&lt;p&gt;Investigating what the purpose of the string was, I saw that we had classes that looked like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Screen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Screen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;JSONObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JSONObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;jo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;previous&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Screen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;currentScreen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So each screen has the previous screen the user visited, to allow the user to go “back” and get the exact screen they were in before (state, scrolling position, validation notices etc). The user session also has the current screen the user is in, so if the user reconnects to an existing session, we can return to where they were.&lt;/p&gt;

&lt;p&gt;There are two design problems here:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The “back” stack is unlimited, meaning we’re saving more and more state until we explode&lt;/li&gt;
  &lt;li&gt;by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jo.put(&quot;previous&quot;, previous.toJson());&lt;/code&gt;, we’re converting the JSON dictionary to a string. Since JSON fields have quotes, and those quotes need to be escaped when stored in a string, they are stored as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&quot;&lt;/code&gt;.
That backslash needs to be escaped when this string is stored inside another string, compouding into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\\&quot;&lt;/code&gt;. A couple more rounds of this, and we get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\\\\\\\\\\\\\\\&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It turns out that a user with a session with lots of screens produced a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentScreen&lt;/code&gt; String of gigantic proportions.&lt;/p&gt;

&lt;h2 id=&quot;handling-and-followup&quot;&gt;Handling and followup&lt;/h2&gt;
&lt;p&gt;We divided the problem into a quick fix and a long-term one:&lt;/p&gt;

&lt;p&gt;The quick fix was truncating the “previous” string if it goes over a specific char amount (e.g. not letting it go over 100MB).
While this is not a complete solution and might impact the user experience, it was very quick to implement and easy to test, boosting our reliability (preventing a specific session from inflating and bringing the server down).&lt;/p&gt;

&lt;p&gt;The long-term fix was rewriting the “previous” stack solution completely, creating a dedicated real stack with self-imposed size limits and reporting.
It took a long time to write, and longer to test and slowly release, but it really prevented memory waste, rather than only hide away whale-strings as another form of memory (e.g. very deep JSON objects).&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;We continued to use the memory-dump analysis tool and found more nonsense we killed, but nothing as easy as this.&lt;/p&gt;

&lt;p&gt;My main takeway from this story is that sometimes, checking the details of how your program uses resources (e.g. examining a memdump rather than just measuring overall memory utilization) is crucial for success and produces quick wins from the start.&lt;/p&gt;</content><author><name>Nitzan</name></author><category term="Java" /><category term="Ramblings" /><summary type="html">In my previous role, I supported a Java service that operated similarly to RDP or Citrix by enabling remote UI functionality. This service relied on sessions, which consisted of interconnected Java objects that were supposed to be cleaned up either when a user logged out or after a predetermined timeout period.</summary></entry><entry><title type="html">Get Android App Sizes with ADB</title><link href="https://blog.backslasher.net/android-app-sizes.html" rel="alternate" type="text/html" title="Get Android App Sizes with ADB" /><published>2023-03-29T00:00:00+03:00</published><updated>2023-03-29T00:00:00+03:00</updated><id>https://blog.backslasher.net/android-app-sizes</id><content type="html" xml:base="https://blog.backslasher.net/android-app-sizes.html">&lt;p&gt;Upon receiving a notification from my NVidia Shield indicating that it was running low on storage space, I attempted to use the device’s interface to troubleshoot the issue.&lt;br /&gt;
I found the interface to be cumbersome and unintuitive. Fortunately, I had recently enabled the Android Debug Bridge (ADB) for the purpose of automating tasks, so I decided to utilize it to solve the problem.&lt;/p&gt;

&lt;h2 id=&quot;connecting&quot;&gt;Connecting&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adb connect shield.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Complete whatever prompts pop up on the device&lt;/p&gt;

&lt;h2 id=&quot;script&quot;&gt;Script&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-euo&lt;/span&gt; pipefail

get_field&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Find correct field&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;RES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | perl &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'print $1,$/ if /^'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;': (.+)$/'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# If numeric values, translate from bytes into GB with 0.1 percision&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | jq &lt;span class=&quot;s1&quot;&gt;'. | map(. / 1024 / 1024 / 1024 | (. * 10 | floor | . / 10)) '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Return&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# https://android.stackexchange.com/a/220444&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RAW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;adb shell dumpsys diskstats&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{}'&lt;/span&gt; | jq &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--argjson&lt;/span&gt; names &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;get_field &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RAW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Package Names&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--argjson&lt;/span&gt; sizes &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;get_field &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RAW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;App Sizes&quot;&lt;/span&gt; n&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--argjson&lt;/span&gt; data &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;get_field &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RAW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;App Data Sizes&quot;&lt;/span&gt; n&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--argjson&lt;/span&gt; cache &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;get_field &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RAW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Cache Sizes&quot;&lt;/span&gt; n&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'[$names, $sizes, $data, $cache] | transpose | .[] | {&quot;name&quot;: .[0], &quot;app&quot;: .[1], &quot;data&quot;: .[2], &quot;cache&quot;:.[3]} | (.total = .app + .data + .cache)'&lt;/span&gt; |
  jq &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sort_by(.total) | reverse'&lt;/span&gt; | 
  jq &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.[]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/android-app-stats
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;org.xbmc.kodi&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;:0.1,&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:1.7,&lt;span class=&quot;s2&quot;&gt;&quot;cache&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:1.8&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.google.android.tvlauncher&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:0.1,&lt;span class=&quot;s2&quot;&gt;&quot;cache&quot;&lt;/span&gt;:0.1,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0.2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.nordvpn.android&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;:0.1,&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;cache&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0.1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.google.android.gms&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;:0.1,&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;cache&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0.1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.nvidia.tegrazone3&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;:0.1,&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;cache&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0.1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.google.android.apps.mediashell&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;:0.1,&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;cache&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0.1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.google.android.inputmethod.latin&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;cache&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.nvidia.developerwidget&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;cache&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.android.captiveportallogin&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;cache&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.android.providers.contacts&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;app&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;cache&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With some post-processing:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bin/android-app-stats | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; | jq &lt;span class=&quot;s1&quot;&gt;'{name, total}'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;org.xbmc.kodi&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:1.8&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.google.android.tvlauncher&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0.2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.nordvpn.android&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0.1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.google.android.gms&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0.1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.nvidia.tegrazone3&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0.1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.google.android.apps.mediashell&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0.1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.google.android.inputmethod.latin&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.nvidia.developerwidget&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.android.captiveportallogin&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;com.android.providers.contacts&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;total&quot;&lt;/span&gt;:0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I found out that Kodi is the major offender, and did some spring cleaning.&lt;/p&gt;</content><author><name>Nitzan</name></author><category term="Linux" /><category term="Bash" /><category term="Android" /><category term="JQ" /><summary type="html">Upon receiving a notification from my NVidia Shield indicating that it was running low on storage space, I attempted to use the device’s interface to troubleshoot the issue. I found the interface to be cumbersome and unintuitive. Fortunately, I had recently enabled the Android Debug Bridge (ADB) for the purpose of automating tasks, so I decided to utilize it to solve the problem.</summary></entry><entry><title type="html">Changed 3 lines of code, saved 760 server hours per month</title><link href="https://blog.backslasher.net/3-loc-760h.html" rel="alternate" type="text/html" title="Changed 3 lines of code, saved 760 server hours per month" /><published>2023-03-27T00:00:00+03:00</published><updated>2023-03-27T00:00:00+03:00</updated><id>https://blog.backslasher.net/3-loc-760h</id><content type="html" xml:base="https://blog.backslasher.net/3-loc-760h.html">&lt;h2 id=&quot;act-1-where-i-write-java&quot;&gt;Act 1, where I write Java&lt;/h2&gt;
&lt;p&gt;In the past, I had the opportunity to assist a team in developing an Android application and a Java server. While my primary focus was on the networking and container environment, a hackathon presented an opportunity to dive deeper into the app’s functionality. I discovered that the server was utilizing an excessive amount of CPU time, approximately 0.5% of the total, to check a particular feature flag. Recognizing the potential for cost savings, I implemented a caching mechanism to store the flag for five-second intervals, thus saving the company a tidy sum.&lt;/p&gt;

&lt;p&gt;During the development process, I observed that every update I made to my pull request (PR) required over 20 minutes for validation. Upon further investigation of the PR signals, I discovered that the end-to-end (e2e) signal was the clear outlier, consistently taking nearly 20 minutes, while all the other signals took less than two minutes. After the hackathon, I revisited this issue to identify the root cause.&lt;/p&gt;

&lt;h2 id=&quot;act-2-with-big-plans-for-great-things&quot;&gt;Act 2, with big plans for great things&lt;/h2&gt;
&lt;p&gt;I consulted with the engineer responsible for our e2e infrastructure to inquire about the validation delays I had been experiencing. In response, they confirmed that the entire system was subpar, and that there were plans to restructure it in the coming months.
They said the following was missing:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Utilizing previously-built or partially-built artifacts&lt;/li&gt;
  &lt;li&gt;Building production rather than debug code (including minified assets and no symbols)&lt;/li&gt;
  &lt;li&gt;Connecting to a common log analysis framework to identify specific issues&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While these sounded good to me, I couldn’t resist taking a closer look at the code myself.
What I found there shocked me.&lt;/p&gt;

&lt;h2 id=&quot;act-3-where-i-spot-a-problem&quot;&gt;Act 3, where I spot a problem&lt;/h2&gt;
&lt;p&gt;The e2e code was hard to read (non-common PHP dialect, sprinkled with JavaScript), but I figured out a specific piece that looked weird to me.
Translated to JavaScript, it looked a bit like this:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e2eTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;checkOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;runProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;server/build.sh&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;artifact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;androidBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buildApk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serverProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;runProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;java server/server.jar localhost:8000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Magic to ensure server is running&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;androidTestRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artifact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;localhost:8000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;serverProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you feel annoyed, it means you can see what I saw:&lt;br /&gt;
&lt;strong&gt;We’re waiting for the server build to finish before even starting client build&lt;/strong&gt;&lt;br /&gt;
To avoid wasting time building the APK when there are issues with the server, we have a process in place to wait for the server to finish before building the client. However, this approach results in unnecessary delays since the two builds do not benefit from being run sequentially. I confirmed this and approached the owner of the end-to-end (e2e) process to address the issue. The owner appeared indifferent and casually mentioned that they planned to implement a new build system that automatically parallelizes the build steps next half. After undrestanding that this is not being currently handled, I went to work.&lt;/p&gt;

&lt;h2 id=&quot;act-4-cut-and-paste-is-used&quot;&gt;Act 4. Cut and paste is used&lt;/h2&gt;
&lt;p&gt;Using my limited knowledge of parallelism in our e2e codebase, I rewrote the above to something like:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e2eTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;checkOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;artifact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;runProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;server/build.sh&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;androidBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buildApk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serverProcess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;runProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;java server/server.jar localhost:8000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Magic to ensure server is running&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;androidTestRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;artifact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;localhost:8000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;serverProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;With the new build system in place, we are now able to build both the server and client in parallel and wait for both to complete before initiating testing. I tested and deployed this change promptly and effortlessly, as it was a small change only rearranging the execution methods in a particular area.&lt;/p&gt;

&lt;p&gt;To our delight, this minor modification reduced the e2e signal’s run time from 20 minutes to 11 minutes, resulting in significant time savings for our engineering team, who no longer had to wait as long for PRs to be ready. While this achievement was appreciated by the team, the server runtime savings were more easily measured.&lt;br /&gt;
By decreasing the e2e runtime, we were able to reduce the worker time that our build system consumed. Analyzing our build system’s utilization logs, I discovered that this simple change eliminated &lt;em&gt;760 hours&lt;/em&gt; of worker time per month, which is a substantial amount.&lt;/p&gt;

&lt;h2 id=&quot;epilogue-big-plans-are-crashing&quot;&gt;Epilogue: big plans are crashing&lt;/h2&gt;
&lt;p&gt;Upon informing my colleagues of the improvement in e2e testing, I received feedback from the e2e specialist. They expressed dissatisfaction because their six-month plan to optimize the process would be more challenging to justify since the expected gains were now less significant. They had anticipated achieving a 7-minute e2e suite run time, which is a considerable improvement from 20 minutes, but less impressive compared to the new 11 minutes. After discussing the situation, we concluded that if the overhaul was less attractive now, it would be best to focus on other areas that could yield more significant gains. For instance, there may be other areas of the codebase with inefficient feature-flag checks that consume unnecessary CPU time, and optimizing these areas could save us a considerable amount of money.&lt;/p&gt;

&lt;p&gt;I ended up moving to another team shortly after, but I will forever remember how my 3-line change saved our company a whole worker a month.&lt;/p&gt;</content><author><name>Nitzan</name></author><category term="Ramblings" /><summary type="html">Act 1, where I write Java In the past, I had the opportunity to assist a team in developing an Android application and a Java server. While my primary focus was on the networking and container environment, a hackathon presented an opportunity to dive deeper into the app’s functionality. I discovered that the server was utilizing an excessive amount of CPU time, approximately 0.5% of the total, to check a particular feature flag. Recognizing the potential for cost savings, I implemented a caching mechanism to store the flag for five-second intervals, thus saving the company a tidy sum.</summary></entry><entry><title type="html">Sapling Commands</title><link href="https://blog.backslasher.net/sapling-commands.html" rel="alternate" type="text/html" title="Sapling Commands" /><published>2023-03-12T00:00:00+02:00</published><updated>2023-03-12T00:00:00+02:00</updated><id>https://blog.backslasher.net/sapling-commands</id><content type="html" xml:base="https://blog.backslasher.net/sapling-commands.html">&lt;p&gt;&lt;a href=&quot;https://sapling-scm.com/&quot;&gt;Sapling&lt;/a&gt; (the Facebook-released SCM) is great, but the docs are not-great.&lt;br /&gt;
I thought I’d list some commands it took me a while to undertand, for me and for others&lt;/p&gt;

&lt;h2 id=&quot;create-remote-tag&quot;&gt;Create remote tag&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sl push --to tags/v0.0.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.0.5&lt;/code&gt; is the tag name.&lt;br /&gt;
The “remote” is because there are no local tags in Sapling&lt;/p&gt;

&lt;h2 id=&quot;delete-remote-branch&quot;&gt;Delete remote branch&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sl push --delete main default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where “main” is the name of the branch, and “default” is the path (aka origin in git-talk)&lt;/p&gt;</content><author><name>Nitzan</name></author><category term="Linux" /><category term="Sapling" /><category term="Git" /><summary type="html">Sapling (the Facebook-released SCM) is great, but the docs are not-great. I thought I’d list some commands it took me a while to undertand, for me and for others</summary></entry><entry><title type="html">Processing Israeli FOIA calendars, Part 1</title><link href="https://blog.backslasher.net/foia-calendars-pt1.html" rel="alternate" type="text/html" title="Processing Israeli FOIA calendars, Part 1" /><published>2023-02-01T00:00:00+02:00</published><updated>2023-02-01T00:00:00+02:00</updated><id>https://blog.backslasher.net/foia-calendars-pt1</id><content type="html" xml:base="https://blog.backslasher.net/foia-calendars-pt1.html">&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;

&lt;p&gt;I’m a volunteer in the Israeli Public Knowledge Workshop (&lt;a href=&quot;https://he.wikipedia.org/wiki/%D7%94%D7%A1%D7%93%D7%A0%D7%90_%D7%9C%D7%99%D7%93%D7%A2_%D7%A6%D7%99%D7%91%D7%95%D7%A8%D7%99&quot;&gt;wiki&lt;/a&gt;), which is a nonprofit working to increase transparency of Israeli’s ruling bodies (e.g. Goverment, Municipal authorities, courts).&lt;br /&gt;
I recently picked up a nice project that I thought would be worth a read.&lt;/p&gt;

&lt;p&gt;Under the &lt;a href=&quot;https://he.wikipedia.org/wiki/%D7%97%D7%95%D7%A7_%D7%97%D7%95%D7%A4%D7%A9_%D7%94%D7%9E%D7%99%D7%93%D7%A2&quot;&gt;Israeli equivalent of FOIA&lt;/a&gt; (Freedom Of Information Act), citizens are able to request information form public authorities.&lt;br /&gt;
Some nonprofits are using this law to try and acquire calendars/diaries/journals of various public servants, and publish them to the public.&lt;/p&gt;

&lt;p&gt;Aside from the obvious advantage in being able to ensure that a public servant spends their time in actually serving the public, there are instances where these calendars are useful in exposing conspiracies and hints of corruption (&lt;a href=&quot;https://www.haaretz.co.il/blogs/tomeravital/2018-06-18/ty-article/0000017f-f8df-d044-adff-fbff9e040000&quot;&gt;article in Hebrew&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We now have a lot of these calendars as individual files. We’d like to do some more advanced analytics on them, including cross-referencing them with one another, and for that we’d like to load them all up into a nice database.&lt;br /&gt;
This is my mission.&lt;/p&gt;

&lt;p&gt;I called this project “Dear Diary”, as the Hebrew words for “Calendar” and “Diary” are identical.&lt;/p&gt;

&lt;h2 id=&quot;series-logistics&quot;&gt;Series Logistics&lt;/h2&gt;
&lt;p&gt;Instead of making a huge post, I’m going to divide it into a series to make it easier to read (and to write).&lt;br /&gt;
I’ll also try to make it readable for people who are not Linux / Python / whatever pros. Hopefully my family and friends will be able to read it and understand what I’m working on 😀&lt;/p&gt;

&lt;p&gt;If you’re not a programmer, feel free to skip the code bits.&lt;/p&gt;

&lt;p&gt;This is part 1&lt;/p&gt;

&lt;h2 id=&quot;data-exploration-and-what-were-targeting&quot;&gt;Data exploration and what we’re targeting&lt;/h2&gt;

&lt;p&gt;The first thing I wanted to do is to understand which data I’m dealing with.
I went into the website that holds all of the FOIA-collected documents we have, and searched for “יומן” (Hebrew for “Calendar”).
The URL looks like this:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.odata.org.il/dataset?q=%D7%99%D7%95%D7%9E%D7%9F
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023-02-01-foia-calendars-pt1/ui.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looks promising. I now tried to find an API equivalent, and it wasn’t that hard. Reading the docs and poking at some URLs gave me this:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.odata.org.il/api/3/action/resource_search?query=name:יומן
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can try the url on your browser, and you’ll get a huge &lt;a href=&quot;https://en.wikipedia.org/wiki/JSON#Syntax&quot;&gt;JSON&lt;/a&gt; object, detailing all of the files relating to calendars.&lt;br /&gt;
&lt;img src=&quot;/assets/2023-02-01-foia-calendars-pt1/json.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using cURL (which fetches the list) and feeding the result to jq (which allows us to dive into the JSON), we can see what a single item looks like:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -s 'https://www.odata.org.il/api/3/action/resource_search?query=name:יומן' | jq '.result.results[0]'
{
  &quot;mimetype&quot;: null,
  &quot;cache_url&quot;: null,
  &quot;state&quot;: &quot;active&quot;,
  &quot;hash&quot;: &quot;&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;format&quot;: &quot;PDF&quot;,
  &quot;url&quot;: &quot;https://www.odata.org.il/dataset/39092605-8599-470a-ba76-36e434acd2f7/resource/81d2cc0b-beae-46a3-81d7-e7d529ae9fb8/download/-2013.pdf&quot;,
  &quot;datastore_active&quot;: false,
  &quot;created&quot;: &quot;2017-06-19T11:48:30.996554&quot;,
  &quot;cache_last_updated&quot;: null,
  &quot;package_id&quot;: &quot;39092605-8599-470a-ba76-36e434acd2f7&quot;,
  &quot;mimetype_inner&quot;: null,
  &quot;last_modified&quot;: &quot;2017-06-19T11:48:30.969395&quot;,
  &quot;position&quot;: 0,
  &quot;revision_id&quot;: &quot;6ed049da-8e71-4c9f-a8e2-25315290412c&quot;,
  &quot;size&quot;: null,
  &quot;url_type&quot;: &quot;upload&quot;,
  &quot;id&quot;: &quot;81d2cc0b-beae-46a3-81d7-e7d529ae9fb8&quot;,
  &quot;resource_type&quot;: null,
  &quot;name&quot;: &quot;יומן ראש עיריית באר שבע 2013.pdf&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a lot of interesting fields, but for now we’ll look into “mimetype” (&lt;a href=&quot;https://en.wikipedia.org/wiki/Media_type&quot;&gt;wiki&lt;/a&gt;), which is a web standard indicating of what kind of file this is.&lt;br /&gt;
Unfortunately, this file has “null” (meaning unknown), but most of the files don’t.&lt;br /&gt;
In order to see what we’re dealing with, we’re going to do a more complex command, that gets all the mimetypes and groups them, showing us the most common ones.&lt;br /&gt;
The command and result look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -s 'https://www.odata.org.il/api/3/action/resource_search?query=name:יומן' | jq '.result.results[].mimetype' | sortiq | head
    799 &quot;application/pdf&quot;
    357 &quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;
     78 &quot;text/csv&quot;
     63 null
     47 &quot;application/vnd.ms-Excel&quot;
      9 &quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;
      6 &quot;image/tiff&quot;
      4 &quot;application/zip&quot;
      3 &quot;text/calendar&quot;
      2 &quot;application/vnd.openxmlformats-officedocument.spreadsheetml.template&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can see that most of the files are in the PDF format, with “officedocument.spreadsheetml.sheet” (Excel 2007+ spreadsheets) in second place.
From manually looking at some of the PDF files, I saw that they’re hard to read.&lt;br /&gt;
Examples:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.odata.org.il/dataset/5cf1f784-5b6c-4506-8a5a-a63c453a4486/resource/911a7c7c-7e92-45f3-803a-bebcc98ad6e2/download/-2015-1-30.pdf&quot;&gt;this&lt;/a&gt; is a printed and scanned document, which is completly unintelligible for a machine without a lot of guesswork.
&lt;img src=&quot;/assets/2023-02-01-foia-calendars-pt1/pdf-scanned.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.odata.org.il/dataset/fa354f46-9630-4446-9e7c-5ed2a2a80aeb/resource/2c6dff24-62f2-4090-a9d6-fcff6d40d77a/download/-2019.pdf&quot;&gt;this&lt;/a&gt;, while made of text, is nontrivial for a computer to understand.
&lt;img src=&quot;/assets/2023-02-01-foia-calendars-pt1/pdf-calendar.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because the PDFs seemed to be problematic, I decided to start looking at Excel files as a first step.&lt;/p&gt;

&lt;p&gt;Now that we know that we want the Excel files, we should download them locally so we can experiment on them.&lt;br /&gt;
For this, we’re going to get all of the files, filter out only the Excel ones, and download them all to a specific directory.&lt;br /&gt;
Let’s do this:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl 'https://www.odata.org.il/api/3/action/resource_search?query=name:יומן' -s | jq '.result.results[] | select(.mimetype == &quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;) | &quot;mkdir -p output/reapings/\(.id) &amp;amp;&amp;amp; curl -s \(.url) -o \&quot;output/reapings/\(.id)/\(.name)\&quot;&quot;' -r | parallel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The result in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output/reapings&lt;/code&gt; is a bunch of directories, each one named after a file ID. inside, there are files:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls output/reapings/ | head
00181757-0c0d-4f82-b389-b3624bdeec87
00caa5ea-f127-4da4-882b-0dd32e350a1d
012d05b8-6378-47f0-a0c2-ec0804a2b53e
018f36ba-5052-46be-8bd2-b5e29d2f83db
026b6b8e-43da-4c0b-8fcb-f75ae4f1acc0
05a626d9-8830-4d50-b514-f64fade06ab8
05d0a3fe-1f1b-4c7b-8977-65ad34a13939
0616d2bf-f8e3-4a09-ab77-ed13071ac9e9
06e244f5-4b9c-4f83-9166-75815d73dafa
07048613-e656-4229-935e-9f8522e49194

$ ls output/reapings/00181757-0c0d-4f82-b389-b3624bdeec87
'יומן מנכל העירייה 1.1.22-30.6.22.xlsx'

$ ls output/reapings/0616d2bf-f8e3-4a09-ab77-ed13071ac9e9
'יומן מרב מיכאלי.xlsx'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s do a quick check of how many files we have:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ find -type f | wc -l
2013
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let’s also ask how much space this directory takes:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ du -hs output/reapings/
34M	output/reapings/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So we now have 2013 Excel files, weighing 34 MegaBytes. Neat.&lt;/p&gt;

&lt;h2 id=&quot;next-episode&quot;&gt;Next episode&lt;/h2&gt;
&lt;p&gt;Chewing, or how to take these Excel files and extract specific calendar events.&lt;/p&gt;</content><author><name>Nitzan</name></author><category term="Python" /><category term="Israel" /><summary type="html">Preface</summary></entry><entry><title type="html">Caddy is better than Nginx for Docker Compose on ECS</title><link href="https://blog.backslasher.net/docker-compose-ecs-nginx-caddy.html" rel="alternate" type="text/html" title="Caddy is better than Nginx for Docker Compose on ECS" /><published>2023-01-09T00:00:00+02:00</published><updated>2023-01-09T00:00:00+02:00</updated><id>https://blog.backslasher.net/docker-compose-ecs-nginx-caddy</id><content type="html" xml:base="https://blog.backslasher.net/docker-compose-ecs-nginx-caddy.html">&lt;p&gt;I recently managed to use Docker Compose to launch a small app in Aamazon’s Elastic Container Services (ECS).&lt;br /&gt;
Overall, the result is pretty incredible. I’m able to run all of my containers in AWS, with volumes and netowrks and all, with only a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yaml&lt;/code&gt; file needed.&lt;br /&gt;
However, my biggest issue was with getting nginx to work, and I ended up ditching it to Caddy.&lt;/p&gt;

&lt;h2 id=&quot;why-you-need-nginx&quot;&gt;Why you need nginx&lt;/h2&gt;
&lt;p&gt;As can be seen in the &lt;a href=&quot;https://docs.docker.com/cloud/ecs-compose-features/#exposing-ports&quot;&gt;ECS integration Compose features&lt;/a&gt; page, the way to accept incoming requests to your Compose project is by defining a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port&lt;/code&gt; in the Compose file (e.g. 80), and AWS will create a single load balancer that will unconditionally forward all incoming requests on that port to that service.&lt;br /&gt;
This means that you can only have one service listening on HTTP/HTTPS, and this service has to do all of the “gateway” work (TLS veritifcation and / or termination, routing to upstream, filtering paths etc). nginx is great for this job.&lt;br /&gt;
The interesting part in my nginx config looks like this:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
  listen 443 ssl;
  server_name project.site;
  ssl_certificate     /ssl/fullchain.pem;
  ssl_certificate_key /ssl/privkey.pem;
  ssl_client_certificate /ssl/...;
  ssl_verify_client on;

  # Always shortcircuit requests from ELB
  if ($http_user_agent = &quot;ELB-HealthChecker/2.0&quot;) {
    return 200;
  }

  location /{
    proxy_pass http://backend/;
  }

  location /debug {
    proxy_pass http://debug;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Which means:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Listen on 443, respond to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project.site&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Where my SSL certificate is stored, and how to validate client certificates&lt;/li&gt;
  &lt;li&gt;Demand SSL certificates from incoming connections and verify them&lt;/li&gt;
  &lt;li&gt;If the “User-Agent” string looks like the ELB healthchecker, return “OK”.&lt;/li&gt;
  &lt;li&gt;Pass all requests to the “backend” service&lt;/li&gt;
  &lt;li&gt;If the request’s path starts with “/debug”, pass it to the “debug” service&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;why-nginx-doesnt-cut-it&quot;&gt;Why nginx doesn’t cut it&lt;/h2&gt;
&lt;p&gt;Each service (e.g. “backend”) has multiple containers providing this service, each with its own IP.&lt;br /&gt;
Container runtimes (k8s, Docker, ECS) provide “service discovery”, usually using DNS (in ECS it’s called &lt;a href=&quot;https://aws.amazon.com/cloud-map/&quot;&gt;CloudMap&lt;/a&gt;).&lt;br /&gt;
Simply put, this means that doing a DNS query for “backend” will return the IP addresses of containers running the “backend” service.&lt;br /&gt;
This allows nginx, as the gateway, to find a server to forward the HTTP request to (and hopefully get a response).&lt;br /&gt;
The problem starts with nginx being so speed oriented that it doesn’t re-translate the name “backend” into a new IP address every now and then. Instead, it keeps the mapping (e.g. “backend –&amp;gt; 127.0.0.4”) forever.&lt;br /&gt;
This means that whenever I create a new container for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backend&lt;/code&gt; and remove the old one (as containers are immutable), nginx remembers the &lt;em&gt;wrong IP address&lt;/em&gt;, and will fail forwarding the requests until nginx is restarted.&lt;br /&gt;
This is obviously not ideal, as I’d like my gateways to adapt to changes in my backend without having to restart them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nginx.com/blog/dns-service-discovery-nginx-plus/&quot;&gt;This article&lt;/a&gt; offers two alternatives to the “never refresh IPs” approach:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use variables (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set $upstream = backend; proxy_pass http://$upstream/&lt;/code&gt;) and a custom resolver&lt;/li&gt;
  &lt;li&gt;Buy nginx pro, create an upstream, and add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve&lt;/code&gt; extension to the server entry in the upstream.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Buying pro is out of the question, as it requires talking to a human (I can’t just pay for a license on the site).&lt;br /&gt;
Using variables works, with the following cavaets:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Unlike in Docker, the address of the DNS server is not known during image build time.&lt;br /&gt;
Instead, I created a script that runs on the container initialization, uses perl to extract the DNS server from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolv.conf&lt;/code&gt;, and creates an nginx config to set the resolver to that&lt;/li&gt;
  &lt;li&gt;nginx using its own DNS resolver means we’re missing out on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;search&lt;/code&gt; option in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolv.conf&lt;/code&gt;, which is a shame because in ECS the names are actually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backend.project.local&lt;/code&gt;, which means that just using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backend&lt;/code&gt; in the nginx config won’t work.&lt;br /&gt;
I created an additional script that extracts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;search&lt;/code&gt; option from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolve.conf&lt;/code&gt; and replaces all upstream configurations in all of the nginx files.&lt;br /&gt;
This is comlete tomfoolery, but I wanted things to work already.&lt;/li&gt;
  &lt;li&gt;Usually, nginx is smart about rewriting the URLs that are forwarded to upstream.&lt;br /&gt;
In the above config file, a request for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/debug/memdump&lt;/code&gt; &lt;strong&gt;should&lt;/strong&gt; be forwarded to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug&lt;/code&gt; service, with the URL being &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/memdump&lt;/code&gt;.&lt;br /&gt;
This doesn’t work when using variables in comoposing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proxy_pass&lt;/code&gt; directive, which messes up my URL structure in my backends.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The DNS refresh seemed like such a small thing, but it left nginx completely unsuitable to be my “gateway”. &lt;br /&gt;
I seriously considered switching to httpd, even though it’s not as shiny, just so I can get something working.&lt;br /&gt;
While searching for options, I randomly stumbled upon Caddy&lt;/p&gt;

&lt;h2 id=&quot;caddy-is-nice&quot;&gt;Caddy is nice&lt;/h2&gt;
&lt;p&gt;Simply put, Caddy just works.&lt;br /&gt;
I don’t use the shinier features of auto-acquiring certificates from LetsEncrypt.&lt;br /&gt;
My config file is as basic as can be:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project.site {
  tls /ssl/fullchain.pem /ssl/privkey.pem {
    client_auth {
      mode require_and_verify
      trusted_leaf_cert_file /ssl/...
      trusted_ca_cert_file /ssl/...
    }
  }

  @awsHealthCheck {
    header User-Agent 'ELB-HealthChecker/2.0'
  }
  respond @awsHealthCheck 200

  handle_path /* {
    reverse_proxy backend
  }

  handle_path /debug/* {
    reverse_proxy debug
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can see the directives are pretty similar (I had to compromise on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/debug&lt;/code&gt; and replace it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/debug/&lt;/code&gt;), but it works. No trickery to get it to refresh the records, no variables, no upselling to the Pro version that forces you to talk to a human.&lt;/p&gt;

&lt;p&gt;I’m very happy with Caddy, and planning to further use it in the future.&lt;/p&gt;</content><author><name>Nitzan</name></author><category term="Linux" /><category term="Docker" /><category term="AWS" /><summary type="html">I recently managed to use Docker Compose to launch a small app in Aamazon’s Elastic Container Services (ECS). Overall, the result is pretty incredible. I’m able to run all of my containers in AWS, with volumes and netowrks and all, with only a docker-compose.yaml file needed. However, my biggest issue was with getting nginx to work, and I ended up ditching it to Caddy.</summary></entry></feed>